/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 *
 * @author Keloc
 */
import TDA.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
public class Interfaz extends javax.swing.JFrame {
    
    

    /**
     * Creates new form Interfaz
     */
    Banco banco;
    public Interfaz(Banco banco) {
        initComponents();
        this.banco = banco;
    }
    File ficheroClientes = new File("src/main/java/ficheros/clientes.txt");
    File ficheroDepositos = new File("src/main/java/ficheros/depositos.txt");
    File ficheroRetiros = new File("src/main/java/ficheros/retiros.txt");
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRetiroN = new javax.swing.JPanel();
        dineroDepL1 = new javax.swing.JLabel();
        idCuentaDepL2 = new javax.swing.JLabel();
        idCuentaRet = new javax.swing.JTextField();
        dineroRetiro = new javax.swing.JTextField();
        idClienteL2 = new javax.swing.JLabel();
        idClienteR = new javax.swing.JTextField();
        addingClienteP = new javax.swing.JPanel();
        clienteApellidosL = new javax.swing.JLabel();
        clienteNomL = new javax.swing.JLabel();
        clienteIDL = new javax.swing.JLabel();
        clienteSexoL = new javax.swing.JLabel();
        clienteNomTF = new javax.swing.JTextField();
        clienteIDTF = new javax.swing.JTextField();
        clienteApellidosTF = new javax.swing.JTextField();
        sexoComboBox = new javax.swing.JComboBox<>();
        edadL = new javax.swing.JLabel();
        edad = new javax.swing.JTextField();
        aperturaL = new javax.swing.JLabel();
        saldoApertura = new javax.swing.JTextField();
        monedaL = new javax.swing.JLabel();
        tipoMoneda = new javax.swing.JTextField();
        depositoPanel = new javax.swing.JPanel();
        dineroDepL = new javax.swing.JLabel();
        idCuentaDepL = new javax.swing.JLabel();
        idCuentaDep = new javax.swing.JTextField();
        dineroDeposito = new javax.swing.JTextField();
        idClienteL = new javax.swing.JLabel();
        idClienteM = new javax.swing.JTextField();
        depositanteL = new javax.swing.JLabel();
        depositante = new javax.swing.JTextField();
        vfP = new javax.swing.JPanel();
        idCuentaDepL1 = new javax.swing.JLabel();
        idCuentaVf = new javax.swing.JTextField();
        idClienteL1 = new javax.swing.JLabel();
        idClienteVf = new javax.swing.JTextField();
        nuevaCuentaP = new javax.swing.JPanel();
        aperturaL1 = new javax.swing.JLabel();
        saldoAperturaC = new javax.swing.JTextField();
        monedaL1 = new javax.swing.JLabel();
        tipoMonedaC = new javax.swing.JTextField();
        numIdP = new javax.swing.JPanel();
        numIdL = new javax.swing.JLabel();
        numId = new javax.swing.JTextField();
        bg = new javax.swing.JPanel();
        menu = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        closeB = new javax.swing.JLabel();
        title = new javax.swing.JPanel();
        mostrarCuentas = new javax.swing.JButton();
        addCuenta = new javax.swing.JButton();
        borrarCuenta = new javax.swing.JButton();
        retirarBoton = new javax.swing.JButton();
        mostrarClientesBoton = new javax.swing.JButton();
        depositoBoton = new javax.swing.JButton();
        imgL1 = new javax.swing.JLabel();
        imgL5 = new javax.swing.JLabel();
        imgL6 = new javax.swing.JLabel();
        imgL7 = new javax.swing.JLabel();
        imgL9 = new javax.swing.JLabel();
        imgL10 = new javax.swing.JLabel();
        movsBoton = new javax.swing.JButton();
        imgL11 = new javax.swing.JLabel();
        verificarCuentaB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bajaClienteB = new javax.swing.JButton();

        dineroDepL1.setText("Monto:");

        idCuentaDepL2.setText("ID de Cuenta:");

        idClienteL2.setText("ID del Cliente:");

        javax.swing.GroupLayout panelRetiroNLayout = new javax.swing.GroupLayout(panelRetiroN);
        panelRetiroN.setLayout(panelRetiroNLayout);
        panelRetiroNLayout.setHorizontalGroup(
            panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRetiroNLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRetiroNLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idCuentaDepL2)
                            .addComponent(dineroDepL1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(idClienteL2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idClienteR, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dineroRetiro, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCuentaRet, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelRetiroNLayout.setVerticalGroup(
            panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRetiroNLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dineroDepL1)
                    .addComponent(dineroRetiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idCuentaDepL2)
                    .addComponent(idCuentaRet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRetiroNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idClienteR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idClienteL2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        clienteApellidosL.setText("Apellidos:");

        clienteNomL.setText("Nombre:");

        clienteIDL.setText("Numero de Identidad:");

        clienteSexoL.setText("Sexo:");

        sexoComboBox.setMaximumRowCount(2);
        sexoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino" }));

        edadL.setText("Edad:");

        aperturaL.setText("Saldo de Apertura:");

        monedaL.setText("Tipo de Moneda:");

        javax.swing.GroupLayout addingClientePLayout = new javax.swing.GroupLayout(addingClienteP);
        addingClienteP.setLayout(addingClientePLayout);
        addingClientePLayout.setHorizontalGroup(
            addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingClientePLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addComponent(aperturaL)
                        .addGap(18, 18, 18)
                        .addComponent(saldoApertura))
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addComponent(clienteNomL, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clienteNomTF, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addComponent(clienteApellidosL, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clienteApellidosTF))
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addComponent(clienteIDL)
                        .addGap(18, 18, 18)
                        .addComponent(clienteIDTF))
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clienteSexoL, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edadL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addingClientePLayout.createSequentialGroup()
                        .addComponent(monedaL, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tipoMoneda)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        addingClientePLayout.setVerticalGroup(
            addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingClientePLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteNomL)
                    .addComponent(clienteNomTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteApellidosL)
                    .addComponent(clienteApellidosTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteIDL)
                    .addComponent(clienteIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clienteSexoL)
                    .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edadL)
                    .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aperturaL)
                    .addComponent(saldoApertura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addingClientePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monedaL)
                    .addComponent(tipoMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        dineroDepL.setText("Monto:");

        idCuentaDepL.setText("ID de Cuenta:");

        idClienteL.setText("ID del Cliente:");

        depositanteL.setText("Depositante:");

        javax.swing.GroupLayout depositoPanelLayout = new javax.swing.GroupLayout(depositoPanel);
        depositoPanel.setLayout(depositoPanelLayout);
        depositoPanelLayout.setHorizontalGroup(
            depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, depositoPanelLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(depositoPanelLayout.createSequentialGroup()
                        .addComponent(depositanteL)
                        .addGap(18, 18, 18)
                        .addComponent(depositante))
                    .addGroup(depositoPanelLayout.createSequentialGroup()
                        .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(depositoPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idCuentaDepL)
                                    .addComponent(dineroDepL, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(idClienteL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idClienteM, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dineroDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idCuentaDep, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44))
        );
        depositoPanelLayout.setVerticalGroup(
            depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(depositoPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dineroDepL)
                    .addComponent(dineroDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idCuentaDepL)
                    .addComponent(idCuentaDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idClienteM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idClienteL))
                .addGap(18, 18, 18)
                .addGroup(depositoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositanteL)
                    .addComponent(depositante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        idCuentaDepL1.setText("ID de Cuenta:");

        idClienteL1.setText("ID del Cliente:");

        javax.swing.GroupLayout vfPLayout = new javax.swing.GroupLayout(vfP);
        vfP.setLayout(vfPLayout);
        vfPLayout.setHorizontalGroup(
            vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
            .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(vfPLayout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(vfPLayout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(idCuentaDepL1))
                        .addComponent(idClienteL1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(idClienteVf, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idCuentaVf, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(11, Short.MAX_VALUE)))
        );
        vfPLayout.setVerticalGroup(
            vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
            .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(vfPLayout.createSequentialGroup()
                    .addGap(61, 61, 61)
                    .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(idCuentaDepL1)
                        .addComponent(idCuentaVf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(vfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(idClienteVf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idClienteL1))
                    .addContainerGap(61, Short.MAX_VALUE)))
        );

        aperturaL1.setText("Saldo de Apertura:");

        monedaL1.setText("Tipo de Moneda:");

        javax.swing.GroupLayout nuevaCuentaPLayout = new javax.swing.GroupLayout(nuevaCuentaP);
        nuevaCuentaP.setLayout(nuevaCuentaPLayout);
        nuevaCuentaPLayout.setHorizontalGroup(
            nuevaCuentaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nuevaCuentaPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(nuevaCuentaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(nuevaCuentaPLayout.createSequentialGroup()
                        .addComponent(aperturaL1)
                        .addGap(18, 18, 18)
                        .addComponent(saldoAperturaC, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nuevaCuentaPLayout.createSequentialGroup()
                        .addComponent(monedaL1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tipoMonedaC, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        nuevaCuentaPLayout.setVerticalGroup(
            nuevaCuentaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nuevaCuentaPLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(nuevaCuentaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aperturaL1)
                    .addComponent(saldoAperturaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(nuevaCuentaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monedaL1)
                    .addComponent(tipoMonedaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        numIdL.setText("Ingresa tu Numero de Identidad:");

        javax.swing.GroupLayout numIdPLayout = new javax.swing.GroupLayout(numIdP);
        numIdP.setLayout(numIdPLayout);
        numIdPLayout.setHorizontalGroup(
            numIdPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numIdPLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(numIdPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numIdL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numId))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        numIdPLayout.setVerticalGroup(
            numIdPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numIdPLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(numIdL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Banco");
        setBackground(new java.awt.Color(153, 153, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(615, 450));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(850, 500));

        bg.setBackground(new java.awt.Color(153, 153, 153));
        bg.setMinimumSize(new java.awt.Dimension(850, 500));
        bg.setPreferredSize(new java.awt.Dimension(615, 500));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu.setBackground(new java.awt.Color(248, 51, 51));
        menu.setMinimumSize(new java.awt.Dimension(700, 100));
        menu.setPreferredSize(new java.awt.Dimension(700, 100));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logoBancoE.jpg"))); // NOI18N

        closeB.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
        closeB.setForeground(new java.awt.Color(255, 255, 255));
        closeB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeB.setText("X");
        closeB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(closeB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 244, Short.MAX_VALUE))
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(menuLayout.createSequentialGroup()
                .addComponent(closeB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        bg.add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 100));

        title.setBackground(new java.awt.Color(204, 204, 204));
        title.setPreferredSize(new java.awt.Dimension(680, 300));
        title.setRequestFocusEnabled(false);

        mostrarCuentas.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        mostrarCuentas.setText("Mostrar Cuentas");
        mostrarCuentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarCuentasActionPerformed(evt);
            }
        });

        addCuenta.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        addCuenta.setText("Añadir Cuenta");
        addCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCuentaActionPerformed(evt);
            }
        });

        borrarCuenta.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        borrarCuenta.setText("Borrar Cuenta");
        borrarCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarCuentaActionPerformed(evt);
            }
        });

        retirarBoton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        retirarBoton.setText("Retirar Dinero");
        retirarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarBotonActionPerformed(evt);
            }
        });

        mostrarClientesBoton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        mostrarClientesBoton.setText("Mostrar Clientes");
        mostrarClientesBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarClientesBotonActionPerformed(evt);
            }
        });

        depositoBoton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        depositoBoton.setText("Deposito");
        depositoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositoBotonActionPerformed(evt);
            }
        });

        imgL1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/clientesBanco.jpg"))); // NOI18N
        imgL1.setText("jLabel1");

        imgL5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/borrarBanco.jpg"))); // NOI18N
        imgL5.setText("jLabel1");

        imgL6.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/añadirCuentaBanco.jpg"))); // NOI18N
        imgL6.setText("jLabel1");

        imgL7.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/retiroBanco.jpg"))); // NOI18N
        imgL7.setText("jLabel1");

        imgL9.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cuentasBanco.jpg"))); // NOI18N
        imgL9.setText("jLabel1");

        imgL10.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/depositoBanco.jpg"))); // NOI18N
        imgL10.setText("jLabel1");

        movsBoton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        movsBoton.setText("Movimientos");
        movsBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movsBotonActionPerformed(evt);
            }
        });

        imgL11.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        imgL11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/enlistadosBanco.jpg"))); // NOI18N
        imgL11.setText("jLabel1");

        verificarCuentaB.setFont(new java.awt.Font("Microsoft YaHei", 1, 10)); // NOI18N
        verificarCuentaB.setText("Verificar Cuenta");
        verificarCuentaB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificarCuentaBActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/atenderTodoBanco.jpg"))); // NOI18N

        bajaClienteB.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 10)); // NOI18N
        bajaClienteB.setText("Dar de Baja a un Cliente");
        bajaClienteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajaClienteBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout titleLayout = new javax.swing.GroupLayout(title);
        title.setLayout(titleLayout);
        titleLayout.setHorizontalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleLayout.createSequentialGroup()
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(titleLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(titleLayout.createSequentialGroup()
                                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titleLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(imgL9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27))
                                    .addComponent(mostrarCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(titleLayout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(imgL1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)
                                        .addComponent(imgL11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(titleLayout.createSequentialGroup()
                                        .addComponent(mostrarClientesBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(movsBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(verificarCuentaB, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(titleLayout.createSequentialGroup()
                                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(titleLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(imgL6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(imgL5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(imgL7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(titleLayout.createSequentialGroup()
                                        .addComponent(addCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(borrarCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(retirarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titleLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(imgL10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))
                                    .addComponent(depositoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(titleLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(bajaClienteB, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        titleLayout.setVerticalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(titleLayout.createSequentialGroup()
                        .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imgL9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgL1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostrarCuentas))
                    .addGroup(titleLayout.createSequentialGroup()
                        .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imgL11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mostrarClientesBoton)
                            .addComponent(movsBoton)
                            .addComponent(verificarCuentaB))))
                .addGap(18, 18, 18)
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgL6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgL7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgL10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgL5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retirarBoton)
                    .addComponent(addCuenta)
                    .addComponent(depositoBoton)
                    .addComponent(borrarCuenta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bajaClienteB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        bg.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 550, 330));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBMouseClicked
        try {
            ObjectOutputStream cl = new ObjectOutputStream(new FileOutputStream(ficheroClientes));
            cl.writeObject(banco.getListaDeClientes());
            cl.flush();
            cl.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(Interfaz.this, "Error al guardar");
        }
        System.exit(0);
    }//GEN-LAST:event_closeBMouseClicked

    private void movsBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movsBotonActionPerformed
        int res = JOptionPane.showConfirmDialog(null, numIdP, "Ingresa lo solicitado", JOptionPane.OK_CANCEL_OPTION);
        try {
            if (res == JOptionPane.OK_OPTION){
                int idC = Integer.parseInt(numId.getText());
                ListaSE<Deposito> deps = banco.getDepsCliente(idC);
                ListaSE<Retiro> rets = banco.getRetsCliente(idC);
                JOptionPane.showMessageDialog(Interfaz.this, "Depositos:\n"+deps.show()+"Retiros: \n"+rets.show());
            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(Interfaz.this, e.getMessage());
        }
    }//GEN-LAST:event_movsBotonActionPerformed

    private void depositoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositoBotonActionPerformed
        int res = JOptionPane.showConfirmDialog(null, depositoPanel, "Ingresa los datos correspondientes", JOptionPane.OK_CANCEL_OPTION);
        try {
            if (res == JOptionPane.OK_OPTION){
                int idCuentaD = Integer.parseInt(idCuentaDep.getText());
                double dinero = Double.parseDouble(dineroDeposito.getText());
                int idClienteD = Integer.parseInt(idClienteM.getText());
                int cuentaPos = banco.buscarCuenta(idCuentaD);
                String nombreDep = depositante.getText();
                if (cuentaPos == -1){
                    JOptionPane.showMessageDialog(Interfaz.this, "Cuenta no encontrada...");
                } else if(banco.buscarClientePorId(idClienteD) == null){
                    JOptionPane.showMessageDialog(Interfaz.this, "Cliente no encontrado...");
                } else {
                    Cuenta cuentaDep = (Cuenta) banco.buscarClientePorId(idClienteD).getCuentas().get(cuentaPos);
                    Deposito deposito = new Deposito(idClienteD, cuentaDep.getId(), dinero, nombreDep);
                    NodoSE depN = new NodoSE(deposito, null);
                    banco.getListaDeDepositos().add(depN);
                    ObjectOutputStream dep = new ObjectOutputStream(new FileOutputStream(ficheroDepositos));
                    dep.writeObject(banco.getListaDeDepositos());
                    cuentaDep.setSaldo(cuentaDep.getSaldo()+dinero);
                    JOptionPane.showMessageDialog(Interfaz.this, "¡Dinero Añadido a la cuenta!");

                }
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(Interfaz.this, "ERROR:"+e.getMessage());
        }
    }//GEN-LAST:event_depositoBotonActionPerformed

    private void mostrarClientesBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarClientesBotonActionPerformed
        ListaSE clientes = banco.getListaDeClientes();
        if (clientes.isEmpty()){
            JOptionPane.showMessageDialog(Interfaz.this, "No tenemos clientes :'(");
        } else {
            JOptionPane.showMessageDialog(Interfaz.this, banco.getListaDeClientes().show());
        }
    }//GEN-LAST:event_mostrarClientesBotonActionPerformed

    private void retirarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirarBotonActionPerformed
        try {
            ObjectOutputStream ret = new ObjectOutputStream(new FileOutputStream(ficheroRetiros));
            int result = JOptionPane.showConfirmDialog(null, panelRetiroN, "Por favor proporcione la información solicitada:", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION){
                double dinero = Double.parseDouble(dineroRetiro.getText());
                int id = Integer.parseInt(idCuentaRet.getText());
                int posCuenta = banco.buscarCuenta(id);
                int idCliente = Integer.parseInt(idClienteR.getText());
                NodoSE<Cuenta> temp = banco.buscarClientePorId(idCliente).getCuentas().getHead();
                boolean deCliente = false;
                while (temp != null){
                    Cuenta mockCuenta = (Cuenta) temp.getVal();
                    if (id == mockCuenta.getId()){
                        deCliente = true;
                    }
                    temp = temp.getNext();
                }
                if (posCuenta == -1){
                    JOptionPane.showMessageDialog(Interfaz.this, "Cuenta no encontrada :[");
                } else if(banco.buscarClientePorId(idCliente) == null){
                    JOptionPane.showMessageDialog(Interfaz.this, "Cliente no encontrado...");
                } else {
                    Cuenta cuenta = (Cuenta) banco.buscarClientePorId(idCliente).getCuentas().get(posCuenta);
                    if (cuenta.getSaldo() < dinero){
                        JOptionPane.showMessageDialog(Interfaz.this, "No hay suficiente saldo en su cuenta...");
                    } else if (deCliente){
                        Retiro retiro = new Retiro(idCliente, cuenta.getId(), dinero);
                        NodoSE retN = new NodoSE(retiro, null);
                        banco.getListaDeRetiros().add(retN);
                        ret.writeObject(banco.getListaDeRetiros());
                        double saldo = cuenta.getSaldo() - dinero;
                        cuenta.setSaldo(saldo);
                        JOptionPane.showMessageDialog(Interfaz.this, "Dinero retirado satisfactoriamente");
                    } else {
                        JOptionPane.showMessageDialog(Interfaz.this, "Su numero de identidad no coincide con el asociado a su cuenta :/");
                    }
                }
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(Interfaz.this, e.getMessage());
        }
    }//GEN-LAST:event_retirarBotonActionPerformed

    private void borrarCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarCuentaActionPerformed
        try {
            int res = JOptionPane.showConfirmDialog(Interfaz.this, vfP, "Ingresa los datos solicitados", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION){
                int idCu = Integer.parseInt(idCuentaVf.getText());
                int idCl = Integer.parseInt(idClienteVf.getText());
                Cliente cliente = banco.buscarClientePorId(idCl);
                ListaSE cuentas = cliente.getCuentas();
                int pos = banco.buscarCuenta(idCu);
                if (cuentas.length() == 1) {
                    int opt = JOptionPane.showConfirmDialog(Interfaz.this, "Esta accion lo dara de baja. ¿Desea Continuar?", "Advertencia", JOptionPane.OK_CANCEL_OPTION);
                    if (opt == JOptionPane.OK_OPTION){
                         banco.otroBorrar(idCu, idCl);
                        JOptionPane.showMessageDialog(Interfaz.this, "Cuenta #"+idCu+" eliminada. Cliente dado de baja.");
                    }
                }
                banco.otroBorrar(idCu, idCl);
                JOptionPane.showMessageDialog(Interfaz.this, "Cuenta #"+idCu+" eliminada.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Interfaz.this, e.getMessage());
        }
    }//GEN-LAST:event_borrarCuentaActionPerformed

    private void addCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCuentaActionPerformed
            int idCuenta;
            int res = JOptionPane.showConfirmDialog(null, addingClienteP, "Proporcione la información que se le solicita", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION){
                try {
                    String nombreCliente = clienteNomTF.getText();
                    String apellidosCliente = clienteApellidosTF.getText();
                    int clienteID = Integer.parseInt(clienteIDTF.getText());
                    char sexoCliente = 0;
                    int edadCliente = Integer.parseInt(edad.getText());
                    double apertura = Double.parseDouble(saldoApertura.getText());
                    String moneda = tipoMoneda.getText();
                    ListaSE<Cuenta> cuentas = new ListaSE(null);
                    switch (sexoComboBox.getSelectedItem().toString()) {
                        case "Masculino":
                        sexoCliente = 'M';
                        break;
                        case "Femenino":
                        sexoCliente = 'F';
                        break;
                        default:
                        break;
                    }
                    if (edadCliente < 18){
                        JOptionPane.showMessageDialog(Interfaz.this, "Solo aquellos con 18 años o más pueden abrir cuentas bancarias");
                    } else if (apertura <= 0){
                        JOptionPane.showMessageDialog(Interfaz.this, "Para crear una cuenta se debe ingresar saldo");
                    }
                    else {
                        idCuenta = (int) Math.floor(Math.random()*10000);
                        while (true){
                            if (banco.buscarCuenta(idCuenta) == -1){
                                break;
                            }
                            idCuenta = (int) Math.floor(Math.random()*10000);
                        }
                        Cliente cliente = new Cliente(nombreCliente, apellidosCliente, clienteID, sexoCliente, edadCliente, cuentas);
                        banco.otroAñadir(idCuenta, cliente, apertura, moneda);
                        JOptionPane.showMessageDialog(Interfaz.this, "¡Cuenta Creada y Añadida a la Lista!");
                    }
                } catch(Exception e){
                    JOptionPane.showMessageDialog(Interfaz.this, e.getMessage());
                }
            
        } 
    }//GEN-LAST:event_addCuentaActionPerformed

    private void mostrarCuentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarCuentasActionPerformed
        ListaSE<Cuenta> cuentas = banco.getListaDeClientes();
        if (cuentas.isEmpty()){
            JOptionPane.showMessageDialog(Interfaz.this, "Aun no hay Clientes");
        } else {
            try {
                int res = JOptionPane.showConfirmDialog(Interfaz.this, numIdP, "Ingrese el dato solicitado", JOptionPane.OK_CANCEL_OPTION);
                if (res == JOptionPane.OK_OPTION){
                    int id = Integer.parseInt(numId.getText());
                    Cliente cliente = banco.buscarClientePorId(id);
                    if (cliente == null){
                        JOptionPane.showMessageDialog(Interfaz.this, "No se encuentra en la lista de clientes");
                    } else {
                        JOptionPane.showMessageDialog(Interfaz.this, cliente.getCuentas().show());
                    }
                }
            } catch (Exception e){
                JOptionPane.showMessageDialog(Interfaz.this, "ERROR! "+e.getMessage());
            }
        }
    }//GEN-LAST:event_mostrarCuentasActionPerformed

    private void verificarCuentaBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificarCuentaBActionPerformed
        int res = JOptionPane.showConfirmDialog(null, vfP, "Proporcione la información que se le solicita", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION){
            int idClienteV = Integer.parseInt(idClienteVf.getText());
            int idCuentaV = Integer.parseInt(idCuentaVf.getText());
            if (banco.buscarClientePorId(idClienteV) == null){
                int opt = JOptionPane.showConfirmDialog(Interfaz.this, "Usted no es Cliente del banco. ¿Desea darse de alta abriendo una cuenta?", "No es Cliente", JOptionPane.YES_NO_OPTION);
                if (opt == JOptionPane.YES_OPTION){
                    int cre = JOptionPane.showConfirmDialog(null, addingClienteP, "Proporcione la información que se le solicita", JOptionPane.OK_CANCEL_OPTION);
                    if (cre == JOptionPane.OK_OPTION){
                        try {
                            String nombreCliente = clienteNomTF.getText();
                            String apellidosCliente = clienteApellidosTF.getText();
                            int clienteID = Integer.parseInt(clienteIDTF.getText());
                            char sexoCliente = 0;
                            int edadCliente = Integer.parseInt(edad.getText());
                            double apertura = Double.parseDouble(saldoApertura.getText());
                            String moneda = tipoMoneda.getText();
                            ListaSE cuentas = new ListaSE(null);
                            switch (sexoComboBox.getSelectedItem().toString()) {
                                case "Masculino":
                                sexoCliente = 'M';
                                break;
                                case "Femenino":
                                sexoCliente = 'F';
                                break;
                                default:
                                break;
                            }
                            if (edadCliente < 18){
                                JOptionPane.showMessageDialog(Interfaz.this, "Solo aquellos con 18 años o más pueden abrir cuentas bancarias");
                            } else if (apertura <= 0){
                                JOptionPane.showMessageDialog(Interfaz.this, "Para crear una cuenta se debe ingresar saldo");
                            } else {

                                while (true){
                                    if (banco.buscarCuenta(idCuentaV) == -1){
                                        break;
                                    }
                                    idCuentaV = (int) Math.floor(Math.random()*10000);
                                }
                                Cliente cliente = new Cliente(nombreCliente, apellidosCliente, clienteID, sexoCliente, edadCliente, cuentas);
                                banco.otroAñadir(idCuentaV, cliente, apertura, moneda);
                                JOptionPane.showMessageDialog(Interfaz.this, "¡Cuenta Creada y Añadida a la Lista!");
                            }    
                        } catch(Exception e){
                            JOptionPane.showMessageDialog(Interfaz.this,"ERROR! "+e.getMessage());
                        }
                    }
                }
            }
            else if (banco.verificarCuenta(idClienteV, idCuentaV) == -1){
                int opt = JOptionPane.showConfirmDialog(Interfaz.this, "Cuenta no encontrada. ¿Desea crearla?", "Cuenta no encontrada", JOptionPane.YES_NO_OPTION);
                if (opt == JOptionPane.YES_OPTION){
                    int cre = JOptionPane.showConfirmDialog(null, addingClienteP, "Proporcione la información que se le solicita", JOptionPane.OK_CANCEL_OPTION);
                    if (cre == JOptionPane.OK_OPTION){
                        try {
                            String nombreCliente = clienteNomTF.getText();
                            String apellidosCliente = clienteApellidosTF.getText();
                            int clienteID = Integer.parseInt(clienteIDTF.getText());
                            char sexoCliente = 0;
                            int edadCliente = Integer.parseInt(edad.getText());
                            double apertura = Double.parseDouble(saldoApertura.getText());
                            String moneda = tipoMoneda.getText();
                            ListaSE cuentas = new ListaSE(null);
                            switch (sexoComboBox.getSelectedItem().toString()) {
                                case "Masculino":
                                sexoCliente = 'M';
                                break;
                                case "Femenino":
                                sexoCliente = 'F';
                                break;
                                default:
                                break;
                            }
                            if (edadCliente < 18){
                                JOptionPane.showMessageDialog(Interfaz.this, "Solo aquellos con 18 años o más pueden abrir cuentas bancarias");
                            } else if (apertura <= 0){
                                JOptionPane.showMessageDialog(Interfaz.this, "Para crear una cuenta se debe ingresar saldo");
                            } 
                            else {

                                while (true){
                                    if (banco.buscarCuenta(idCuentaV) == -1){
                                        break;
                                    }
                                    idCuentaV = (int) Math.floor(Math.random()*10000);
                                }
                                Cliente cliente = new Cliente(nombreCliente, apellidosCliente, clienteID, sexoCliente, edadCliente, cuentas);
                                banco.otroAñadir(idCuentaV, cliente, apertura, moneda);
                                JOptionPane.showMessageDialog(Interfaz.this, "¡Cuenta Creada y Añadida a la Lista!");
                            }    
                        } catch(Exception e){
                            JOptionPane.showMessageDialog(Interfaz.this,"ERROR! "+e.getMessage());
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(Interfaz.this, "¡Su cuenta fue encontrada! \nCliente: "+banco.buscarClientePorId(idClienteV).toString()+"\nCuenta: "+banco.buscarClientePorId(idClienteV).getCuentas().get(banco.verificarCuenta(idClienteV, idCuentaV)).toString());
            }
        }    
    }//GEN-LAST:event_verificarCuentaBActionPerformed

    private void bajaClienteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajaClienteBActionPerformed
        int res = JOptionPane.showConfirmDialog(Interfaz.this, "Esta accion eliminara sus datos. ¿Desea continuar?", "Darse de baja", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.YES_OPTION){
            int opt = JOptionPane.showConfirmDialog(null, numIdP, "Ingresa lo solicitado", JOptionPane.OK_CANCEL_OPTION);
            if (opt == JOptionPane.OK_OPTION){
                int id = Integer.parseInt(numId.getText());
                banco.darDeBaja(id);
                JOptionPane.showMessageDialog(Interfaz.this, "El Cliente ha sido dado de baja");
            }
        }
    }//GEN-LAST:event_bajaClienteBActionPerformed

    /**
     * @param args the command line arguments
     */

    /**
     *
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     */
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        ListaSE clientes = new ListaSE(null);
        ListaSE depositos = new ListaSE(null);
        ListaSE retiros = new ListaSE(null);
        
        try {
            ObjectInputStream ret = new ObjectInputStream(new FileInputStream("src/main/java/ficheros/retiros.txt"));
            ObjectInputStream dep = new ObjectInputStream(new FileInputStream("src/main/java/ficheros/depositos.txt"));
            ObjectInputStream cl = new ObjectInputStream(new FileInputStream("src/main/java/ficheros/clientes.txt"));
            depositos = (ListaSE) dep.readObject();
            retiros = (ListaSE) ret.readObject();
            clientes = (ListaSE) cl.readObject();
        }catch(IOException e){
            System.out.println(e.getMessage());
        }
        Banco banco = new Banco(clientes, depositos, retiros);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Interfaz(banco).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCuenta;
    private javax.swing.JPanel addingClienteP;
    private javax.swing.JLabel aperturaL;
    private javax.swing.JLabel aperturaL1;
    private javax.swing.JButton bajaClienteB;
    private javax.swing.JPanel bg;
    private javax.swing.JButton borrarCuenta;
    private javax.swing.JLabel clienteApellidosL;
    private javax.swing.JTextField clienteApellidosTF;
    private javax.swing.JLabel clienteIDL;
    private javax.swing.JTextField clienteIDTF;
    private javax.swing.JLabel clienteNomL;
    private javax.swing.JTextField clienteNomTF;
    private javax.swing.JLabel clienteSexoL;
    private javax.swing.JLabel closeB;
    private javax.swing.JTextField depositante;
    private javax.swing.JLabel depositanteL;
    private javax.swing.JButton depositoBoton;
    private javax.swing.JPanel depositoPanel;
    private javax.swing.JLabel dineroDepL;
    private javax.swing.JLabel dineroDepL1;
    private javax.swing.JTextField dineroDeposito;
    private javax.swing.JTextField dineroRetiro;
    private javax.swing.JTextField edad;
    private javax.swing.JLabel edadL;
    private javax.swing.JLabel idClienteL;
    private javax.swing.JLabel idClienteL1;
    private javax.swing.JLabel idClienteL2;
    private javax.swing.JTextField idClienteM;
    private javax.swing.JTextField idClienteR;
    private javax.swing.JTextField idClienteVf;
    private javax.swing.JTextField idCuentaDep;
    private javax.swing.JLabel idCuentaDepL;
    private javax.swing.JLabel idCuentaDepL1;
    private javax.swing.JLabel idCuentaDepL2;
    private javax.swing.JTextField idCuentaRet;
    private javax.swing.JTextField idCuentaVf;
    private javax.swing.JLabel imgL1;
    private javax.swing.JLabel imgL10;
    private javax.swing.JLabel imgL11;
    private javax.swing.JLabel imgL5;
    private javax.swing.JLabel imgL6;
    private javax.swing.JLabel imgL7;
    private javax.swing.JLabel imgL9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel menu;
    private javax.swing.JLabel monedaL;
    private javax.swing.JLabel monedaL1;
    private javax.swing.JButton mostrarClientesBoton;
    private javax.swing.JButton mostrarCuentas;
    private javax.swing.JButton movsBoton;
    private javax.swing.JPanel nuevaCuentaP;
    private javax.swing.JTextField numId;
    private javax.swing.JLabel numIdL;
    private javax.swing.JPanel numIdP;
    private javax.swing.JPanel panelRetiroN;
    private javax.swing.JButton retirarBoton;
    private javax.swing.JTextField saldoApertura;
    private javax.swing.JTextField saldoAperturaC;
    private javax.swing.JComboBox<String> sexoComboBox;
    private javax.swing.JTextField tipoMoneda;
    private javax.swing.JTextField tipoMonedaC;
    private javax.swing.JPanel title;
    private javax.swing.JButton verificarCuentaB;
    private javax.swing.JPanel vfP;
    // End of variables declaration//GEN-END:variables
}
